package algorithm.baek.simulation;

import algorithm.TestCase;
import java.io.IOException;
import java.text.ParseException;

/**
 * https://www.acmicpc.net/problem/17825
 * 백준 17825. 주사위 윷놀이
 */
public class DiceYutnori implements TestCase {

    /*
    분석(5m - 9:16)
    설계(20m - 9:36)
    구현(30m - 10:06)

    분석
    - 시작 칸에 말 4개가 있다.
    - 말은 게임판에 그려진 하살표 방향대로만 이동할 수 있다.
    - 파란색 칸에서 시작하면 파란색 화살표를 타야 한다.
    - 이동중이거나 파란색이 아닌 칸에서 이동을 시작하면 빨간색 화살표를 타야한다.
    - 게임은 10개의 턴으로 이뤄지며, 매 턴마다 1부터 5까지의 수를 주사위로 굴려 나온 수만큼 이동한다.
    - 말이 이동을 마치는 칸에 다른 말이 있으면 그 말은 고를 수 없다. 단 이동을 마치는 칸이 도착 칸이면 고를 수 있다.
    - 말이 이동을 마칠 때마다 칸에 적힌 수만큼 점수를 얻는다.
    - 주사위 10개가 주어질 떄, 얻을 수 있는 점수의 최댓값을 구하라.

    설계
    - 게임판은 링크드리스트 커스텀 자료구조로 구현한다.(빨간색, 파란색 화살표 구현)
    - 말은 4개로 고정이므로 4개의 말을 배열로 관리한다.
    - 백트래킹을 위해 재귀함수로 구현한다.
    - 시뮬레이션은 말을 선택하는 중복선택가능한 조합을 고르는 것이다.

    게임판:
    - 게임판은 커스텀 자료구조로 구현한다.
    - 시작칸과 도착칸을 제외한 칸에는 하나의 말만 존재할 수 있다.
    - 각 칸에는 점수, 빨간색 화살표, 파란색 화살표, 칸의 종류, 말 존재 여부를 저장한다.
    - 칸의 종류는 시작칸, 도착칸, 일반칸으로 구분한다.
    - 게임판은 게임이 종료된 후 게임 점수를 구할 수 있다.
    말:
    - 말은 이동가능 여부를 가지고 있다.
    - 말은 주어진 숫자만큼 이동할 수 있다.

    요구사항:
    o 말은 주어진 숫자만큼 이동할 수 있다.
    o 파란색 칸에서 이동을 시작하면 파란색 화살표를 타야한다.
    o 이동중이거나 파란색이 아닌 칸에서 이동을 시작하면 빨간색 화살표를 타야한다.
    o 말이 이동을 마치는 칸에 다른 말이 있으면 그 말은 고를 수 없다. 단 이동을 마치는 칸이 도착 칸이면 고를 수 있다.
    o 말이 이동을 마칠 때마다 칸에 적힌 수만큼 점수를 얻는다.

     */
    @Override
    public void test() throws ParseException, IOException {

    }
}
